// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  orders   Order[]
  email    String? @unique //optional for now, so when i migrate it wont return error
  password String? //optional for now

  lists       List[]
  sharedLists List[] @relation("shared")

  QR QR[]

  print Print[]

  TimeTracker TimeTracker[]

  visitTrackers VisitTracker[]

  createdAt DateTime @default(now()) @db.Timestamp
}

model Store {
  id           String         @id @default(uuid())
  name         String         @unique
  number       Int?
  orders       Order[]
  keyLog       Keylog[]
  keyImage     Keyimage[]
  callLog      CallLog[]
  employees    Employees[]
  visitTracker VisitTracker[]

  createdAt DateTime @default(now()) @db.Timestamp
}

//list stuff
model List {
  id          String     @id @default(uuid())
  name        String
  item        Item[]
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  sharedUsers User[]     @relation("shared")
  category    Category[]
  orders      Order[]

  createdAt DateTime @default(now()) @db.Timestamp
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  items  Item[]
  list   List?   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String?

  createdAt DateTime @default(now()) @db.Timestamp
}

model Item {
  id         String  @id @default(uuid())
  seedid     String? @unique //if seeded from script id
  name       String  @unique
  quantity   Int     @default(0) //current quantity
  historyQTY Int     @default(0) //how many sold in the past
  image      String?
  units      String?

  list   List?   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String?

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?

  orders Order[]

  shipments Shipment[]

  createdAt DateTime @default(now()) @db.Timestamp
}

model Shipment {
  id           String   @id @default(uuid())
  store        String
  orderLink    String?
  quantity     Int
  shipmentDate DateTime @db.Timestamp

  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String
}

model Order {
  id       String @id @default(uuid())
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   String
  quantity Int

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  completedAt DateTime @default(now()) @db.Timestamp
}

//keys stuff below
model Keylog {
  id         String    @id @default(uuid())
  name       String //name of person taking key
  memo       String?
  takeTime   DateTime
  returnTime DateTime?
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String
}

model Keyimage {
  id    String @id @default(uuid())
  image String

  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime @default(now()) @db.Timestamp
}

//qr section
model QR {
  id     String  @id @default(uuid())
  name   String
  link   String
  image  String? //qr image, optional because we are making two requests
  user   User    @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid String
  count  Int     @default(0)

  createdAt DateTime @default(now()) @db.Timestamp
}

//print section
model Print {
  id     String @id @default(uuid())
  name   String @unique
  user   User   @relation(fields: [userid], references: [id])
  userid String

  printFiles PrintFile[]

  createdAt DateTime @default(now()) @db.Timestamp
}

model PrintFile {
  id       String @id @default(uuid())
  pathName String @unique

  printList   Print  @relation(fields: [printListId], references: [id], onDelete: Cascade)
  printListId String

  createdAt DateTime @default(now()) @db.Timestamp
}

//call logs section
model CallLog {
  id String @id @default(uuid())

  name  String
  title String
  body  String

  createdAt DateTime @default(now()) @db.Timestamp

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String
}

//employees section
model Employees {
  id         String  @id @default(uuid())
  intranetId String?

  firstName String
  lastName  String
  email     String?
  phone     String?
  address   String?

  store   Store  @relation(fields: [storeId], references: [id]) //string for now, later ill find a way to connect it to the store model
  storeId String

  role String

  startDate DateTime  @db.Timestamp
  endDate   DateTime? @db.Timestamp
}

//time tracker section
model TimeTracker {
  id   String @id @default(uuid())
  name String

  history TimeLog[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  currentTimeIn DateTime? @db.Timestamp
}

model TimeLog {
  id      String    @id @default(uuid())
  timeIn  DateTime? @db.Timestamp
  timeOut DateTime? @db.Timestamp

  memo String?

  timeTracker TimeTracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  trackerId   String
}

//visit tracker section
model VisitTracker {
  id String @id @default(uuid())

  memo     String?
  visitors String?

  store   Store? @relation(fields: [storeId], references: [id])
  storeId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  //date of the visit
  actionTime DateTime? @db.Timestamp

  //when this was created
  createdAt DateTime? @default(now()) @db.Timestamp
}

//car tracker section
model CarTracker {
  id String @id @default(uuid())

  name String // car name

  plate String //plate of car

  trackerInputs CarTrackerInput[]

  lastServiceDate DateTime? @db.Timestamp
}

enum car_tacker_input_status {
  damaged
  notdamaged
}

model CarTrackerInput {
  id String @id @default(uuid())

  //time car was taken
  takeTime DateTime? @default(now()) @db.Timestamp

  //time car was returned, can be null until returned
  returnTime DateTime? @db.Timestamp

  // //questions 
  oilStatus              car_tacker_input_status
  tireStatus             car_tacker_input_status
  windShieldWipersStatus car_tacker_input_status
  bodyStatus             car_tacker_input_status
  lightStatus            car_tacker_input_status

  //in case of damages that are not listed but still need attention
  other String

  carTracker   CarTracker? @relation(fields: [carTrackerId], references: [id])
  carTrackerId String?
}

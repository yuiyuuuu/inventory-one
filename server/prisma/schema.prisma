// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//order can have one store, one item, but item can have many orders and store can have many orders

model Item{
  id String @id @default(uuid())
  name String @unique
  quantity Int @default(0) //current quantity
  historyQTY Int @default(0)//how many sold in the past
  // lastCompletedPerson String? //the last person that completed an order with this item
  // completedTimes Json [] //the timestamps of this item being ordered along with the qty
  image String?
  units String?
  createdAt DateTime @default(now()) @db.Timestamp

  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  orders Order[]
}

model Keylog{
  id String @id @default(uuid())
  name String //name of person taking key
  memo String?
  takeTime DateTime
  returnTime DateTime?
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String
}

model Store{
  id String @id @default(uuid())
  name String @unique
  orders Order   []
  keyLog Keylog []
}

model Order {
  id String @id @default(uuid())
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String
  quantity Int

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  completedAt DateTime //decided to put it into a string because its easier convert for now. maybe timestamp later
}

model User{
  id String @id @default(uuid())
  name String @unique
  orders Order []
}

model Category{
  id String @id @default(uuid())
  name String @unique
  items Item []
}

